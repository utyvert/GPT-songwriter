{"ast":null,"code":"var _jsxFileName = \"/Users/utkarshuppal/Documents/GitHub/GPT-songwriter/src/components/StockPriceGraph.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StockPriceGraph = () => {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios('https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=AAPL&interval=5min&apikey=YOUR_API_KEY');\n      const timeSeriesData = result.data['Time Series (5min)'];\n      const data = Object.keys(timeSeriesData).map(date => ({\n        name: date,\n        price: parseFloat(timeSeriesData[date]['4. close'])\n      }));\n      setData(data);\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LineChart, {\n    width: 600,\n    height: 300,\n    data: data,\n    children: [/*#__PURE__*/_jsxDEV(Line, {\n      type: \"monotone\",\n      dataKey: \"price\",\n      stroke: \"#8884d8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n      stroke: \"#ccc\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n      dataKey: \"name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(StockPriceGraph, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = StockPriceGraph;\nexport default StockPriceGraph;\nvar _c;\n$RefreshReg$(_c, \"StockPriceGraph\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","axios","StockPriceGraph","data","setData","fetchData","result","timeSeriesData","Object","keys","map","date","name","price","parseFloat"],"sources":["/Users/utkarshuppal/Documents/GitHub/GPT-songwriter/src/components/StockPriceGraph.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport axios from 'axios';\n\nconst StockPriceGraph = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(\n        'https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=AAPL&interval=5min&apikey=YOUR_API_KEY'\n      );\n\n      const timeSeriesData = result.data['Time Series (5min)'];\n      const data = Object.keys(timeSeriesData).map(date => ({\n        name: date,\n        price: parseFloat(timeSeriesData[date]['4. close']),\n      }));\n\n      setData(data);\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <LineChart width={600} height={300} data={data}>\n      <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" />\n      <CartesianGrid stroke=\"#ccc\" />\n      <XAxis dataKey=\"name\" />\n      <YAxis />\n      <Tooltip />\n      <Legend />\n    </LineChart>\n  );\n};\n\nexport default StockPriceGraph;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAEC,aAAa,EAAEC,OAAO,EAAEC,MAAM,QAAQ,UAAU;AACxF,OAAOC,KAAK,MAAM,OAAO;AAAC;AAE1B,MAAMC,eAAe,GAAG,MAAM;EAAA;EAC5B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEpCC,SAAS,CAAC,MAAM;IACd,MAAMY,SAAS,GAAG,YAAY;MAC5B,MAAMC,MAAM,GAAG,MAAML,KAAK,CACxB,+GAA+G,CAChH;MAED,MAAMM,cAAc,GAAGD,MAAM,CAACH,IAAI,CAAC,oBAAoB,CAAC;MACxD,MAAMA,IAAI,GAAGK,MAAM,CAACC,IAAI,CAACF,cAAc,CAAC,CAACG,GAAG,CAACC,IAAI,KAAK;QACpDC,IAAI,EAAED,IAAI;QACVE,KAAK,EAAEC,UAAU,CAACP,cAAc,CAACI,IAAI,CAAC,CAAC,UAAU,CAAC;MACpD,CAAC,CAAC,CAAC;MAEHP,OAAO,CAACD,IAAI,CAAC;IACf,CAAC;IAEDE,SAAS,EAAE;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE,QAAC,SAAS;IAAC,KAAK,EAAE,GAAI;IAAC,MAAM,EAAE,GAAI;IAAC,IAAI,EAAEF,IAAK;IAAA,wBAC7C,QAAC,IAAI;MAAC,IAAI,EAAC,UAAU;MAAC,OAAO,EAAC,OAAO;MAAC,MAAM,EAAC;IAAS;MAAA;MAAA;MAAA;IAAA,QAAG,eACzD,QAAC,aAAa;MAAC,MAAM,EAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QAAG,eAC/B,QAAC,KAAK;MAAC,OAAO,EAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QAAG,eACxB,QAAC,KAAK;MAAA;MAAA;MAAA;IAAA,QAAG,eACT,QAAC,OAAO;MAAA;MAAA;MAAA;IAAA,QAAG,eACX,QAAC,MAAM;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QACA;AAEhB,CAAC;AAAC,GA/BID,eAAe;AAAA,KAAfA,eAAe;AAiCrB,eAAeA,eAAe;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}