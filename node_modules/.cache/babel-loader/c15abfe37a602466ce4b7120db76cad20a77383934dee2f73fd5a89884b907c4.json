{"ast":null,"code":"var _jsxFileName = \"/Users/utkarshuppal/Documents/GitHub/GPT-songwriter/src/components/Genre.js\",\n  _s = $RefreshSig$();\nimport { React, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Genre() {\n  _s();\n  // The initial state for the dropdown is closed\n  const [isOpen, setIsOpen] = useState(false);\n\n  // This function toggles the dropdown between open and closed\n  function toggleDropdown() {\n    setIsOpen(!isOpen);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleDropdown,\n      children: \"Menu\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Option 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Option 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Option 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 7\n  }, this);\n}\n_s(Genre, \"+sus0Lb0ewKHdwiUhiTAJFoFyQ0=\");\n_c = Genre;\nexport default Genre;\nvar _c;\n$RefreshReg$(_c, \"Genre\");","map":{"version":3,"names":["React","useState","Genre","isOpen","setIsOpen","toggleDropdown"],"sources":["/Users/utkarshuppal/Documents/GitHub/GPT-songwriter/src/components/Genre.js"],"sourcesContent":["import {React, useState} from 'react'\n\nfunction Genre() {\n    // The initial state for the dropdown is closed\n    const [isOpen, setIsOpen] = useState(false);\n\n    // This function toggles the dropdown between open and closed\n    function toggleDropdown() {\n      setIsOpen(!isOpen);\n    }\n  \n    return (\n      <div>\n        <button onClick={toggleDropdown}>\n          Menu\n        </button>\n        {isOpen && (\n          <ul>\n            <li>Option 1</li>\n            <li>Option 2</li>\n            <li>Option 3</li>\n          </ul>\n        )}\n      </div>\n    );\n}\n\nexport default Genre"],"mappings":";;AAAA,SAAQA,KAAK,EAAEC,QAAQ,QAAO,OAAO;AAAA;AAErC,SAASC,KAAK,GAAG;EAAA;EACb;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGH,QAAQ,CAAC,KAAK,CAAC;;EAE3C;EACA,SAASI,cAAc,GAAG;IACxBD,SAAS,CAAC,CAACD,MAAM,CAAC;EACpB;EAEA,oBACE;IAAA,wBACE;MAAQ,OAAO,EAAEE,cAAe;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAEvB,EACRF,MAAM,iBACL;MAAA,wBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAiB,eACjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAiB,eACjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAiB;IAAA;MAAA;MAAA;MAAA;IAAA,QAEpB;EAAA;IAAA;IAAA;IAAA;EAAA,QACG;AAEZ;AAAC,GAvBQD,KAAK;AAAA,KAALA,KAAK;AAyBd,eAAeA,KAAK;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}